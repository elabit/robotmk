#!/bin/bash

main() {
	topdir="$(git rev-parse --show-toplevel)"
	self="${topdir}/ci"
	pyproject_toml_path="${topdir}/pyproject.toml"
	robotmk_dir="${topdir}/robotmk"
	v2_dir="${topdir}/v2/src"
	checkmk_extensions_dir="${topdir}/checkmk_extensions"
	checkmk_dir="${topdir}/checkmk"
	mode="${1}"
	shift

	case "${mode}" in
	'black')
		run_pipenv "${topdir}" black --config "${pyproject_toml_path}" "$@"
		;;

	'black-check-all')
		"${self}" black --check --diff "${robotmk_dir}" "${checkmk_extensions_dir}" "${v2_dir}"
		;;

	'isort')
		run_pipenv "${topdir}" isort --settings-path "${pyproject_toml_path}" "$@"
		;;

	'isort-check-all')
		"${self}" isort --check-only --diff "${checkmk_extensions_dir}" "${robotmk_dir}" "${v2_dir}"
		;;

	'mypy')
		export MYPYPATH="${checkmk_dir}"
		run_pipenv "${topdir}" mypy --config-file "${pyproject_toml_path}" "$@"
		;;

	'mypy-check-all')
		"${self}" mypy --package "checkmk_extensions" --package "robotmk" --package "agent" --package "v2"
		;;

	'pylint')
		export PYTHONPATH="${checkmk_dir}:${PYTHONPATH}"
		run_pipenv "${topdir}" pylint "$@"
		;;

	'pylint-check-all')
		"${self}" pylint --recursive true "${checkmk_extensions_dir}" "${v2_dir}"
		;;

	'pytest')
		run_pipenv "${topdir}" pytest --rootdir "${topdir}" "$@"
		;;

	'pytest-check-all')
		"${self}" pytest "${checkmk_extensions_dir}/tests"
		;;

	'PSScriptAnalyzer-check-all')
		pwsh_output=$(pwsh -Command "Invoke-ScriptAnalyzer -Settings ${topdir}/PSScriptAnalyzerSettings.psd1 -Path ${checkmk_extensions_dir} -Recurse")
		pwsh_exitcode="$?"
		if [ "${pwsh_exitcode}" -eq 0 ]; then {
			if [ -z "${pwsh_output}" ]; then {
				echo "No static Powershell issues found"
				return 0
			} else {
				echo "${pwsh_output}"
				return 1
			}
			fi
		} else {
			echo "${pwsh_output}"
			return "${pwsh_exitcode}"
		}
		fi
		;;

	'check-all')
		"${self}" black-check-all
		"${self}" isort-check-all
		"${self}" mypy-check-all
		"${self}" pylint-check-all
		"${self}" pytest-check-all
		"${self}" PSScriptAnalyzer-check-all
		;;

	*)
		echo "Unknown mode: ${mode}" 1>&2
		return 1
		;;
	esac

	return "$?"
}

run_pipenv() {
	pipenv_script="${1}/pipenv"
	shift
	"${pipenv_script}" run "$@"
}

main "$@"
exit "$?"
