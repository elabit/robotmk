name: CI

on: [push, pull_request]

jobs:
  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
        - name: Rust formatting
          step: cargo-fmt-check
        - name: Rust linting
          step: cargo-clippy
        - name: Rust tests
          step: cargo-test
        - name: Python formatting
          step: black-check-all
        - name: Python import sorting
          step: isort-check-all
        - name: Python type checking
          step: mypy-check-all
        - name: Python linting
          step: pylint-check-all
        - name: Python unit tests
          step: pytest-check-all
        - name: Powershell static analysis
          step: PSScriptAnalyzer-check-all

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version-file: "pyproject.toml"
    
    - name: Setup Poetry
      run: python3 -m pip install poetry

    - name: Setup environment
      run: ./setup

    - name: ${{ matrix.name  }}
      env:
        STEP: ${{ matrix.step }}
      run: ./ci "${STEP}"

  windows:
    runs-on: windows-latest

    strategy:
      matrix:
        include:
        - name: Rust formatting
          step: cargo-fmt-check
        - name: Rust linting
          step: cargo-clippy
        - name: Rust tests
          step: cargo-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: "Setup Rust"
      uses: actions-rust-lang/setup-rust-toolchain@v1.5.0
      with:
        components: rustfmt, clippy

    - name: ${{ matrix.name  }}
      env:
        STEP: ${{ matrix.step }}
      run: .\ci.ps1 $env:STEP
      shell: powershell

  check_success:
    if: always()

    needs:
    - linux
    - windows

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
