#!/usr/bin/env python
import os 
import sys
import yaml
import io
import shutil
from robot import run
from pathlib import Path

#os.environ['HOME']

debug = 1
########### set default values
if debug: print('############### Starting preperation ###############')
if os.name == 'nt':
   cfg = {'outputdir': 'C:/temp',
       'robotdir' : 'C:/ProgramData/checkmk/agent/robot',
       'log'      : 'none',
       'console'  : 'none',
       'report'   : 'none',
       #'suites'   : {}
       }
   CMKCONFIG = Path('C:/ProgramData/checkmk/agent/config/robotmk.cfg')
elif os.name == 'posix':
   cfg = {'outputdir': '/tmp/robot',
       'robotdir' : '/usr/lib/check_mk_agent/robot',
       'log'      : 'none',
       'console'  : 'none',
       'report'   : 'none',
       #'suites'   : {}
       }
   CMKCONFIG = Path('/etc/check_mk/robotmk.cfg')
else:
   # We are not on a supported OS
   if debug: print('\tOS Name' + os.name + 'is not supported by robotmk')
   exit(1)
if debug: print('\tConfig file: %s' % CMKCONFIG)
########## Read configuration ##########
if os.access(CMKCONFIG, os.R_OK):
   if debug: print('\tFound configuration file %s' % CMKCONFIG)
   with open(CMKCONFIG, 'r') as stream:   
      cfg = yaml.safe_load(stream)
else:
   if debug: print('\tNo configuration file found, starting with defaults')
OUTPUTDIR = Path(cfg.pop('outputdir', None))
ROBOTDIR = Path(cfg.pop('robotdir', None))

#TODO Optimize this.
#If no suites are defined we setup an empty suite dict.
#This is necessary to later on fill the dict.
cfg.setdefault('suites',{})
#If no suites defined we run each suite we find in ROBOTDIR
if len(cfg['suites']) == 0:
   if debug: print('\tNo suites found in configuration')
   for suite in ROBOTDIR.iterdir():
      if debug: print('\tFound suite: %s in ROBOTDIR: %s' % (suite.name, ROBOTDIR))
      cfg['suites'].update({suite.name:{}})

################# Run all suites we found in config or ROBOTDIR #######################
for suite,options in cfg['suites'].items():
#for suite in cfg['suites']:
   if debug:
      print('################# Start running suite: %s #####################' % suite)
      print('\tStarting robot with: %s' % (ROBOTDIR.joinpath(suite)))
      print('\tSuite %s is of type %s' % (suite, type(suite)))
      
###################### Run, robot run ##############
   run(ROBOTDIR.joinpath(suite), outputdir=OUTPUTDIR, output=suite.replace('.robot',''), console='none', log=cfg['log'], report='none')

###################### Send output.xml to checkmk ########
#TODO find a way to let robot write the xml file to stdout direct
#possibly problem in Windows

   if options:
      if 'host' in options:
         if debug: print('Found piggy back host:%s in config' % options['host'])
         print('<<<<%s>>>>' % (options['host']))
   print('<<<robotmk:sep(0)>>>')

#Another efficient way to copy output.xml to stdout
#TODO find out whats efficient
#TODO test with OUTPUTDIR.open()
   if debug: print('\tTry to open suite: %s' % suite)
   with open (OUTPUTDIR.joinpath(suite).with_suffix('.xml'), 'r') as f:
      if debug: print('\tCopy outputfile %s to stdout' % (OUTPUTDIR.joinpath(suite).with_suffix('.xml')))
      if not debug: shutil.copyfileobj(f, sys.stdout)
#   sys.exit()

#f = open(cfg['outputdir'] + suite + '.xml', 'r')
#print(f.read()) # Would read the hole file in memory.
#Lets read the file line by line. This is memory efficient, fast, and leads to simple code
#for line in f:
   #print(line.replace('\n',''))
#   print(line)
#f.close()
