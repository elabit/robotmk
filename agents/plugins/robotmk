#!/usr/bin/env python
import os 
import sys
import yaml
import io
import shutil
from robot import run
from pathlib import Path

#os.environ['HOME']

########### set default values
cfg = {'outputdir': '/tmp/robot',
       'robotdir' : '/usr/lib/check_mk_agent/robot',
       'log'      : 'none',
       'console'  : 'none',
       'report'   : 'none',
       'suites'   : {}
       }

if os.name == 'posix':
   CMKCONFIG = Path('/etc/check_mk/robotmk.cfg')
elif os.name == 'nt':
   CMKCONFIG = Path('C:\TBD')
else:
   # We are not on a supported OS
   if debug: print('OS Name' + os.name + 'is not supported by robotmk')
   exit(1)
########## Read configuration ##########
if os.access(CMKCONFIG, os.R_OK):
   with open(CMKCONFIG, 'r') as stream:
      cfg = yaml.safe_load(stream)

OUTPUTDIR = Path(cfg.pop('outputdir', None))
ROBOTDIR = Path(cfg.pop('robotdir', None))

if len(cfg['suites']) == 0:
   for suite in ROBOTDIR.iterdir():
      cfg['suites'].update({suite.name:None})

print(cfg['suites'])

exit(0)

########## Run, robot run ##############
run(cfg['robotdir'], outputdir=cfg['outputdir'], log=cfg['log'], console='none', report='none')

########## Send output.xml to checkmk ########
#TODO find a way to let robot write the xml file to stdout direct
#possibly problem in Windows

print('<<<robotmk>>>')

#Another efficient way to copy output.xml to stdout
#TODO find out whats efficient
with open (cfg['outputdir'] + '/output.xml', 'r') as f:
   shutil.copyfileobj(f, sys.stdout)
sys.exit()

f = open(cfg['outputdir'] + '/output.xml', 'r')
#print(f.read()) # Would read the hole file in memory.
#Lets read the file line by line. This is memory efficient, fast, and leads to simple code
for line in f:
   #print(line.replace('\n',''))
   print(line)
f.close()
